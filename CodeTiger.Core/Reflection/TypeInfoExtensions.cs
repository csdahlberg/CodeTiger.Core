using System.Linq;
using System.Reflection;

namespace CodeTiger.Reflection
{
    /// <summary>
    /// Contains extension methods for the <see cref="TypeInfo"/> class.
    /// </summary>
    public static class TypeInfoExtensions
    {
        private const TypeAttributes StaticAttributes
            = TypeAttributes.Class | TypeAttributes.Abstract | TypeAttributes.Sealed;

        /// <summary>
        /// Determines whether a specified type was generated by a compiler.
        /// </summary>
        /// <param name="typeInfo">Information about the type to check.</param>
        /// <returns><c>true</c> if the type was generated by a compiler, <c>false</c> otherwise.</returns>
        public static bool IsCompilerGenerated(this TypeInfo typeInfo)
        {
            Guard.ArgumentIsNotNull(nameof(typeInfo), typeInfo);

            return typeInfo.CustomAttributes
                .Any(x => string.Equals(x.AttributeType.Name, "CompilerGeneratedAttribute"));
        }

        /// <summary>
        /// Determines whether a specified type is static.
        /// </summary>
        /// <param name="typeInfo">Information about the type to check.</param>
        /// <returns><c>true</c> if the type is static, <c>false</c> otherwise.</returns>
        public static bool IsStatic(this TypeInfo typeInfo)
        {
            Guard.ArgumentIsNotNull(nameof(typeInfo), typeInfo);

            return (typeInfo.Attributes & StaticAttributes) == StaticAttributes;
        }
    }

}
